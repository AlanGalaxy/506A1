---
title: "Assignment1"
author: "Jiaqi Sun"
format: html
editor: visual
---

## Problem 1

\(a\)

```{r}
wine <- read.table("D:/Code/R/wine/wine.data", sep = ",", header = FALSE)

colnames(wine) <- c("Class", "Alcohol", "Malic_acid", "Ash", "Alcalinity_of_ash", 
                    "Magnesium", "Total_phenols", "Flavanoids", 
                    "Nonflavanoid_phenols", "Proanthocyanins", 
                    "Color_intensity", "Hue", "OD280/OD315_of_diluted_wines", 
                    "Proline")
```

\(b\)

```{r}
table(wine$Class)
```

\(c\) 1.

```{r}
max_alcohol <- max(wine$Alcohol)
class_max_alcohol <- wine[wine$Alcohol ==  max_alcohol, 1]
print(paste("Highest alcohol is in class:", class_max_alcohol))
```

\(c\) 2.

```{r}
min_alcohol <- min(wine$Alcohol)
class_min_alcohol <- wine[wine$Alcohol ==  min_alcohol, 1]
print(paste("Lowest alcohol is in class:", class_min_alcohol))
```

\(c\) 3.

```{r}
table(wine$Magnesium > 114)
```

\(c\) 4.

```{r}
table(wine[wine$Magnesium > 114, 1])
```

\(d\)

```{r}
overall_ave <- colMeans(wine[, -1])
class_1_ave <- colMeans(wine[wine$Class == 1, -1])
class_2_ave <- colMeans(wine[wine$Class == 2, -1])
class_3_ave <- colMeans(wine[wine$Class == 3, -1])
average_tabel <- rbind(overall_ave, class_1_ave, class_2_ave, class_3_ave)
```

\(e\)

```{r}
t.test(wine[wine$Class == 1, "Ash"], wine[wine$Class == 2, "Ash"])
t.test(wine[wine$Class == 1, "Ash"], wine[wine$Class == 3, "Ash"])
t.test(wine[wine$Class == 2, "Ash"], wine[wine$Class == 3, "Ash"])
```

```{r}
# my own code for t test
class_number <- table(wine$Class)
n <- vector(length = 3)
sample_mean <- vector(length = 3)
sample_var <- vector(length = 3)
wine_Ash <- wine[, c(1, 4)]

for(i in 1:3){
  n[i] <- as.integer((class_number[i]))
  sample_mean[i] <- mean(wine[wine$Class == i, "Ash"])
  sample_var[i] <- var(wine[wine$Class == i, "Ash"])
}

t12 <- (sample_mean[1] - sample_mean[2]) / sqrt(sample_var[1]/n[1] + sample_var[2]/n[2])
t13 <- (sample_mean[1] - sample_mean[3]) / sqrt(sample_var[1]/n[1] + sample_var[3]/n[3])
t23 <- (sample_mean[2] - sample_mean[3]) / sqrt(sample_var[2]/n[2] + sample_var[3]/n[3])


df12 <- (sample_var[1]/n[1]+sample_var[2]/n[2])^2/(sample_var[1]^2/n[1]^2/(n[1]-1)+sample_var[2]^2/n[2]^2/(n[2]-1))
df13 <- (sample_var[1]/n[1]+sample_var[3]/n[3])^2/(sample_var[1]^2/n[1]^2/(n[1]-1)+sample_var[3]^2/n[3]^2/(n[3]-1))
df23 <- (sample_var[2]/n[2]+sample_var[3]/n[3])^2/(sample_var[2]^2/n[2]^2/(n[2]-1)+sample_var[3]^2/n[3]^2/(n[3]-1))

(1 - pt(abs(t12), df = df12)) * 2
(1 - pt(abs(t13), df = df13)) * 2
(1 - pt(abs(t23), df = df23)) * 2
```

## Problem 2

## Problem 3

> To accomplish this task, we'll create two R functions. The first function will determine the name of a 5-card hand in 5-card stud poker, and the second function will simulate dealing a round of cards for a specified number of players and display the hands along with their names. Here are the two functions:
>
> ```{r}
>
> ```
>
> In this code, the \`get_poker_hand_name\` function takes in vectors of suits and ranks, checks the hand for various poker hand combinations, and returns the name of the hand. The \`simulate_poker_round\` function simulates a round of 5-card stud poker for a specified number of players, deals hands to each player, and displays the hands along with their names using the first function.
